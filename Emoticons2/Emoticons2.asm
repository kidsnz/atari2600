    processor 6502

NO_ILLEGAL_OPCODES = 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; インクルード文
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    include "vcs.h"
    include "macro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; デバッグ用定数
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; カラーコード
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

WHITE_COLOR  = $00
BLUE_COLOR   = $70
RED_COLOR    = $40
YELLOW_COLOR = $1E

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 定数
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

RIGHT_EDGE_X  = 138 ; 右端のX座標
LEFT_EDGE_X   = 1   ; 左端のX座標
TOP_EDGE_Y    = 1   ; 上端のY座標
BOTTOM_EDGE_Y = 175 ; 下端のY座標

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; スプライト用定数
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SPRITE_HEIGHT = 15
SPRITE_NUSIZ_TWO_COPY   = %00000001 ; 2つコピー表示
SPRITE_NUSIZ_THREE_COPY = %00000011 ; 3つコピー表示

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; プレイフィールド用定数
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PF_UNMIRRORING = %00000000 ; プレイフィールドをミラーリングしない
PF_MIRRORING   = %00000001 ; プレイフィールドをミラーリングする

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 汎用マクロ
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; 指定のライン数のタイマーをセットする
    ;  {1}: ライン数
    MAC TIMER_SETUP
.lines  SET {1}
.cycles SET ((.lines * 76) - 13)
    if (.cycles % 64) < 12
        lda #(.cycles / 64) - 1
        sta WSYNC
        else
        lda #(.cycles / 64)
        sta WSYNC
        endif
        sta TIM64T
    ENDM

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; タイマーを待機する
    MAC TIMER_WAIT
.waittimer
        lda INTIM
        bne .waittimer
        sta WSYNC
    ENDM
#endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RAM
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    seg.u Variables
    org $80

; 10 byte / 128 byte

LoopCounter byte    ; ループカウンター
StartColorIdx byte  ; 背景色の開始インデックス

Face0_X byte        ; 顔0のX座標
Face1_X byte        ; 顔1のX座標

Face0_Y byte        ; 顔0のY座標
Face1_Y byte        ; 顔1のY座標

Face0_DirX byte     ; 顔0のXの向き(0:左, 1:右)
Face1_DirX byte     ; 顔1のXの向き(0:左, 1:右)

Face0_DirY byte     ; 顔0のYの向き(0:上, 1:下)
Face1_DirY byte     ; 顔1のYの向き(0:上, 1:下)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; プログラムコードの開始
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    seg Code
    org $F000

Reset:
    CLEAN_START

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 初期化の開始
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    lda #0
    sta StartColorIdx

    ; 顔0の初期置
    lda #40
    sta Face0_X
    sta Face0_Y
    lda #1
    sta Face0_DirX
    sta Face0_DirY

    ; 顔1の初期値
    lda #80
    sta Face1_X
    lda #80
    sta Face1_Y
    lda #0
    sta Face1_DirX
    sta Face1_DirY

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; フレームの開始
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

NextFrame:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 垂直同期の開始
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    VERTICAL_SYNC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 処理(垂直ブランクの開始)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
    TIMER_SETUP 37

    ;　背景色のスクロール処理
    inc StartColorIdx

    ; 顔0, 1の移動処理
    ldy #0
    jsr MoveFace
    ldy #1
    jsr MoveFace
    
    ; 顔0, 1の水平位置のセット
    lda Face0_X
    ldy #0
    jsr SetObjectXPos
    lda Face1_X
    ldy #1
    jsr SetObjectXPos
    sta WSYNC
    sta HMOVE
    
    ; 顔0, 1の色のセット
    lda #YELLOW_COLOR
    sta COLUP0
    sta COLUP1

    TIMER_WAIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 垂直ブランクの終了
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   
    lda #%00000000
    sta VBLANK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 描画処理の開始
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    ldx #0

RenderLoopBegin:
    stx LoopCounter

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ライン処理の開始
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    sta WSYNC

    ; 背景色を設定
    txa
    adc StartColorIdx
    sta COLUBK

    ; 顔0, 1の表示
    MAC RENDER_FACE
        txa
        sec
        sbc Face{1}_Y
        cmp #SPRITE_HEIGHT
        bcc .DrawFace{1}
        lda #0
.DrawFace{1}
        tay
        lda FaceSprite_0,y
        sta GRP{1}
    ENDM

    RENDER_FACE 0
    RENDER_FACE 1

    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; ライン処理の終了
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


    ; 描画処理のループ判定
    ldx LoopCounter
    inx
    cpx #192
    bcc RenderLoopBegin

RenderLoopEnd:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 描画処理の終了
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 処理の開始（オーバースキャン時）
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TIMER_SETUP 30
    lda #%00000010
    sta VBLANK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 処理の終了（オーバースキャンの終了）
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    TIMER_WAIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; フレームの終了
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    
    jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; マクロ
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; サブルーチン
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 対象の顔の移動処理
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Y は対象の種類 (0:顔0, 1:顔1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

MoveFace subroutine

.MoveFaceXBegin
    ; X座標の移動処理
    lda Face0_DirX,y
    cmp #0
    beq .MoveFaceXToLeft
.MoveFaceXToRight
    ; 右に移動
    lda Face0_X,y
    clc
    adc #1
    sta Face0_X,y
    cmp #RIGHT_EDGE_X
    bcc .MoveFaceXEnd
    ; RIGHT_EDGE_Xを超えたら反転
    lda #0
    sta Face0_DirX,y
    jmp .MoveFaceXEnd
.MoveFaceXToLeft
    ; 左に移動
    lda Face0_X,y
    sec
    sbc #1
    sta Face0_X,y
    cmp #LEFT_EDGE_X
    bcs .MoveFaceXEnd
    ; LEFT_EDGE_Xを下回ったら反転
    lda #1
    sta Face0_DirX,y
.MoveFaceXEnd

.MoveFaceYBegin
    ; Y座標の移動処理
    lda Face0_DirY,y
    cmp #0
    beq .MoveFaceYToTop
.MoveFaceYToBottom
    ; 下に移動
    lda Face0_Y,y
    clc
    adc #1
    sta Face0_Y,y
    cmp #BOTTOM_EDGE_Y
    bcc .MoveFaceYEnd
    ; BOTTOM_EDGE_Xを超えたら反転
    lda #0
    sta Face0_DirY,y
    jmp .MoveFaceYEnd
.MoveFaceYToTop
    ; 上に移動
    lda Face0_Y,y
    sec
    sbc #1
    sta Face0_Y,y
    cmp #TOP_EDGE_Y
    bcs .MoveFaceYEnd
    ; TOP_EDGE_Xを下回ったら反転
    lda #1
    sta Face0_DirY,y
.MoveFaceYEnd
    rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 対象のX座標の位置をセットする
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; A は対象のピクセル単位のX座標
;; Y は対象の種類 (0:player0, 1:player1, 2:missile0, 3:missile1, 4:ball)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SetObjectXPos subroutine
    sta WSYNC ; 水平同期を待つ
    sec ; キャリーフラグを1にセット(キャリーフラグは計算命令で繰り上がりや繰り下がりが起きたときに立つフラグ)
.Div15Loop
    sbc #15 ; A から 15 を減算してその結果を A にセット
    bcs .Div15Loop ; キャリーフラグが 0 になるまで繰り返す(このループを抜ける時は A を 15 で割った余りが A に入る)
    eor #%0111 ; A と 7(%0111) でXORして A を -8~7 に調整する
    asl ; A を左に4ビットシフト(このあとのHMP0には上位4ビットにセットする必要があるため)
    asl
    asl
    asl
    sta HMP0,Y ; 指定のスプライト(Y の値によってどのスプライトかが変わる)の水平位置のオフセット値をセット(-7~8)
    sta RESP0,Y ; 指定のスプライト(Y の値によってどのスプライトかが変わる)の描画を開始
    rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; スプライト
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FaceSprite_0:
    .byte #%00000000        ;
    .byte #%01111000        ; ####
    .byte #%01111000        ; ####
    .byte #%11101100        ;### ##
    .byte #%11101100        ;### ##
    .byte #%10110100        ;# ## #
    .byte #%10110100        ;# ## #
    .byte #%11110100        ;#### #
    .byte #%11110100        ;#### #
    .byte #%10110100        ;# ## #
    .byte #%10110100        ;# ## #
    .byte #%11101100        ;### ##
    .byte #%11101100        ;### ##
    .byte #%01111000        ; ####
    .byte #%01111000        ; ####

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; 末尾
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

    org $FFFC
    word Reset
    word Reset
